// ignore_for_file: camel_case_types
// ignore_for_file: prefer_double_quotes
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: prefer_expression_function_bodies
// ignore_for_file: sort_constructors_first
// ignore_for_file: unused_element

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

@ffi.Native<
  ffi.Uint32 Function(
    ffi.Pointer<ffi.Uint32>,
    ffi.Pointer<ffi.Uint32>,
    ffi.Pointer<ffi.Uint32>,
  )
>(symbol: 'MiniAV_GetVersion')
external int _MiniAV_GetVersion(
  ffi.Pointer<ffi.Uint32> major,
  ffi.Pointer<ffi.Uint32> minor,
  ffi.Pointer<ffi.Uint32> patch,
);

MiniAVResultCode MiniAV_GetVersion(
  ffi.Pointer<ffi.Uint32> major,
  ffi.Pointer<ffi.Uint32> minor,
  ffi.Pointer<ffi.Uint32> patch,
) => MiniAVResultCode.fromValue(_MiniAV_GetVersion(major, minor, patch));

@ffi.Native<ffi.Pointer<ffi.Char> Function()>()
external ffi.Pointer<ffi.Char> MiniAV_GetVersionString();

@ffi.Native<ffi.Uint32 Function(MiniAVLogCallback, ffi.Pointer<ffi.Void>)>(
  symbol: 'MiniAV_SetLogCallback',
)
external int _MiniAV_SetLogCallback(
  MiniAVLogCallback callback,
  ffi.Pointer<ffi.Void> user_data,
);

MiniAVResultCode MiniAV_SetLogCallback(
  MiniAVLogCallback callback,
  ffi.Pointer<ffi.Void> user_data,
) => MiniAVResultCode.fromValue(_MiniAV_SetLogCallback(callback, user_data));

@ffi.Native<ffi.Uint32 Function(ffi.Uint32)>(symbol: 'MiniAV_SetLogLevel')
external int _MiniAV_SetLogLevel(int level);

MiniAVResultCode MiniAV_SetLogLevel(MiniAVLogLevel level) =>
    MiniAVResultCode.fromValue(_MiniAV_SetLogLevel(level.value));

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Uint32)>(
  symbol: 'MiniAV_GetErrorString',
)
external ffi.Pointer<ffi.Char> _MiniAV_GetErrorString(int code);

ffi.Pointer<ffi.Char> MiniAV_GetErrorString(MiniAVResultCode code) =>
    _MiniAV_GetErrorString(code.value);

@ffi.Native<ffi.Uint32 Function(ffi.Pointer<ffi.Void>)>(
  symbol: 'MiniAV_ReleaseBuffer',
)
external int _MiniAV_ReleaseBuffer(ffi.Pointer<ffi.Void> internal_handle);

MiniAVResultCode MiniAV_ReleaseBuffer(ffi.Pointer<ffi.Void> internal_handle) =>
    MiniAVResultCode.fromValue(_MiniAV_ReleaseBuffer(internal_handle));

@ffi.Native<
  ffi.Uint32 Function(
    ffi.Pointer<ffi.Pointer<MiniAVDeviceInfo>>,
    ffi.Pointer<ffi.Uint32>,
  )
>(symbol: 'MiniAV_Camera_EnumerateDevices')
external int _MiniAV_Camera_EnumerateDevices(
  ffi.Pointer<ffi.Pointer<MiniAVDeviceInfo>> devices,
  ffi.Pointer<ffi.Uint32> count,
);

MiniAVResultCode MiniAV_Camera_EnumerateDevices(
  ffi.Pointer<ffi.Pointer<MiniAVDeviceInfo>> devices,
  ffi.Pointer<ffi.Uint32> count,
) =>
    MiniAVResultCode.fromValue(_MiniAV_Camera_EnumerateDevices(devices, count));

@ffi.Native<ffi.Uint32 Function(ffi.Pointer<MiniAVDeviceInfo>, ffi.Uint32)>(
  symbol: 'MiniAV_FreeDeviceList',
)
external int _MiniAV_FreeDeviceList(
  ffi.Pointer<MiniAVDeviceInfo> devices,
  int count,
);

MiniAVResultCode MiniAV_FreeDeviceList(
  ffi.Pointer<MiniAVDeviceInfo> devices,
  int count,
) => MiniAVResultCode.fromValue(_MiniAV_FreeDeviceList(devices, count));

@ffi.Native<
  ffi.Uint32 Function(
    ffi.Pointer<ffi.Char>,
    ffi.Pointer<ffi.Pointer<ffi.Void>>,
    ffi.Pointer<ffi.Uint32>,
  )
>(symbol: 'MiniAV_Camera_GetSupportedFormats')
external int _MiniAV_Camera_GetSupportedFormats(
  ffi.Pointer<ffi.Char> device_id,
  ffi.Pointer<ffi.Pointer<ffi.Void>> formats,
  ffi.Pointer<ffi.Uint32> count,
);

MiniAVResultCode MiniAV_Camera_GetSupportedFormats(
  ffi.Pointer<ffi.Char> device_id,
  ffi.Pointer<ffi.Pointer<ffi.Void>> formats,
  ffi.Pointer<ffi.Uint32> count,
) => MiniAVResultCode.fromValue(
  _MiniAV_Camera_GetSupportedFormats(device_id, formats, count),
);

@ffi.Native<ffi.Uint32 Function(ffi.Pointer<ffi.Void>, ffi.Uint32)>(
  symbol: 'MiniAV_FreeFormatList',
)
external int _MiniAV_FreeFormatList(ffi.Pointer<ffi.Void> formats, int count);

MiniAVResultCode MiniAV_FreeFormatList(
  ffi.Pointer<ffi.Void> formats,
  int count,
) => MiniAVResultCode.fromValue(_MiniAV_FreeFormatList(formats, count));

@ffi.Native<ffi.Uint32 Function(ffi.Pointer<MiniAVCameraContextHandle>)>(
  symbol: 'MiniAV_Camera_CreateContext',
)
external int _MiniAV_Camera_CreateContext(
  ffi.Pointer<MiniAVCameraContextHandle> context,
);

MiniAVResultCode MiniAV_Camera_CreateContext(
  ffi.Pointer<MiniAVCameraContextHandle> context,
) => MiniAVResultCode.fromValue(_MiniAV_Camera_CreateContext(context));

@ffi.Native<ffi.Uint32 Function(MiniAVCameraContextHandle)>(
  symbol: 'MiniAV_Camera_DestroyContext',
)
external int _MiniAV_Camera_DestroyContext(MiniAVCameraContextHandle context);

MiniAVResultCode MiniAV_Camera_DestroyContext(
  MiniAVCameraContextHandle context,
) => MiniAVResultCode.fromValue(_MiniAV_Camera_DestroyContext(context));

@ffi.Native<
  ffi.Uint32 Function(
    MiniAVCameraContextHandle,
    ffi.Pointer<ffi.Char>,
    ffi.Pointer<ffi.Void>,
  )
>(symbol: 'MiniAV_Camera_Configure')
external int _MiniAV_Camera_Configure(
  MiniAVCameraContextHandle context,
  ffi.Pointer<ffi.Char> device_id,
  ffi.Pointer<ffi.Void> format,
);

MiniAVResultCode MiniAV_Camera_Configure(
  MiniAVCameraContextHandle context,
  ffi.Pointer<ffi.Char> device_id,
  ffi.Pointer<ffi.Void> format,
) => MiniAVResultCode.fromValue(
  _MiniAV_Camera_Configure(context, device_id, format),
);

@ffi.Native<
  ffi.Uint32 Function(
    MiniAVCameraContextHandle,
    MiniAVBufferCallback,
    ffi.Pointer<ffi.Void>,
  )
>(symbol: 'MiniAV_Camera_StartCapture')
external int _MiniAV_Camera_StartCapture(
  MiniAVCameraContextHandle context,
  MiniAVBufferCallback callback,
  ffi.Pointer<ffi.Void> user_data,
);

MiniAVResultCode MiniAV_Camera_StartCapture(
  MiniAVCameraContextHandle context,
  MiniAVBufferCallback callback,
  ffi.Pointer<ffi.Void> user_data,
) => MiniAVResultCode.fromValue(
  _MiniAV_Camera_StartCapture(context, callback, user_data),
);

@ffi.Native<ffi.Uint32 Function(MiniAVCameraContextHandle)>(
  symbol: 'MiniAV_Camera_StopCapture',
)
external int _MiniAV_Camera_StopCapture(MiniAVCameraContextHandle context);

MiniAVResultCode MiniAV_Camera_StopCapture(MiniAVCameraContextHandle context) =>
    MiniAVResultCode.fromValue(_MiniAV_Camera_StopCapture(context));

@ffi.Native<
  ffi.Uint32 Function(
    ffi.Pointer<ffi.Pointer<MiniAVDeviceInfo>>,
    ffi.Pointer<ffi.Uint32>,
  )
>(symbol: 'MiniAV_Screen_EnumerateDisplays')
external int _MiniAV_Screen_EnumerateDisplays(
  ffi.Pointer<ffi.Pointer<MiniAVDeviceInfo>> displays,
  ffi.Pointer<ffi.Uint32> count,
);

MiniAVResultCode MiniAV_Screen_EnumerateDisplays(
  ffi.Pointer<ffi.Pointer<MiniAVDeviceInfo>> displays,
  ffi.Pointer<ffi.Uint32> count,
) => MiniAVResultCode.fromValue(
  _MiniAV_Screen_EnumerateDisplays(displays, count),
);

@ffi.Native<
  ffi.Uint32 Function(
    ffi.Pointer<ffi.Pointer<MiniAVDeviceInfo>>,
    ffi.Pointer<ffi.Uint32>,
  )
>(symbol: 'MiniAV_Screen_EnumerateWindows')
external int _MiniAV_Screen_EnumerateWindows(
  ffi.Pointer<ffi.Pointer<MiniAVDeviceInfo>> windows,
  ffi.Pointer<ffi.Uint32> count,
);

MiniAVResultCode MiniAV_Screen_EnumerateWindows(
  ffi.Pointer<ffi.Pointer<MiniAVDeviceInfo>> windows,
  ffi.Pointer<ffi.Uint32> count,
) =>
    MiniAVResultCode.fromValue(_MiniAV_Screen_EnumerateWindows(windows, count));

@ffi.Native<ffi.Uint32 Function(ffi.Pointer<MiniAVScreenContextHandle>)>(
  symbol: 'MiniAV_Screen_CreateContext',
)
external int _MiniAV_Screen_CreateContext(
  ffi.Pointer<MiniAVScreenContextHandle> context,
);

MiniAVResultCode MiniAV_Screen_CreateContext(
  ffi.Pointer<MiniAVScreenContextHandle> context,
) => MiniAVResultCode.fromValue(_MiniAV_Screen_CreateContext(context));

@ffi.Native<ffi.Uint32 Function(MiniAVScreenContextHandle)>(
  symbol: 'MiniAV_Screen_DestroyContext',
)
external int _MiniAV_Screen_DestroyContext(MiniAVScreenContextHandle context);

MiniAVResultCode MiniAV_Screen_DestroyContext(
  MiniAVScreenContextHandle context,
) => MiniAVResultCode.fromValue(_MiniAV_Screen_DestroyContext(context));

@ffi.Native<
  ffi.Uint32 Function(
    MiniAVScreenContextHandle,
    ffi.Pointer<ffi.Char>,
    ffi.Pointer<ffi.Void>,
  )
>(symbol: 'MiniAV_Screen_ConfigureDisplay')
external int _MiniAV_Screen_ConfigureDisplay(
  MiniAVScreenContextHandle context,
  ffi.Pointer<ffi.Char> display_id,
  ffi.Pointer<ffi.Void> format,
);

MiniAVResultCode MiniAV_Screen_ConfigureDisplay(
  MiniAVScreenContextHandle context,
  ffi.Pointer<ffi.Char> display_id,
  ffi.Pointer<ffi.Void> format,
) => MiniAVResultCode.fromValue(
  _MiniAV_Screen_ConfigureDisplay(context, display_id, format),
);

@ffi.Native<
  ffi.Uint32 Function(
    MiniAVScreenContextHandle,
    ffi.Pointer<ffi.Char>,
    ffi.Pointer<ffi.Void>,
  )
>(symbol: 'MiniAV_Screen_ConfigureWindow')
external int _MiniAV_Screen_ConfigureWindow(
  MiniAVScreenContextHandle context,
  ffi.Pointer<ffi.Char> window_id,
  ffi.Pointer<ffi.Void> format,
);

MiniAVResultCode MiniAV_Screen_ConfigureWindow(
  MiniAVScreenContextHandle context,
  ffi.Pointer<ffi.Char> window_id,
  ffi.Pointer<ffi.Void> format,
) => MiniAVResultCode.fromValue(
  _MiniAV_Screen_ConfigureWindow(context, window_id, format),
);

@ffi.Native<
  ffi.Uint32 Function(
    MiniAVScreenContextHandle,
    ffi.Pointer<ffi.Char>,
    ffi.Int,
    ffi.Int,
    ffi.Int,
    ffi.Int,
    ffi.Pointer<ffi.Void>,
  )
>(symbol: 'MiniAV_Screen_ConfigureRegion')
external int _MiniAV_Screen_ConfigureRegion(
  MiniAVScreenContextHandle context,
  ffi.Pointer<ffi.Char> display_id,
  int x,
  int y,
  int width,
  int height,
  ffi.Pointer<ffi.Void> format,
);

MiniAVResultCode MiniAV_Screen_ConfigureRegion(
  MiniAVScreenContextHandle context,
  ffi.Pointer<ffi.Char> display_id,
  int x,
  int y,
  int width,
  int height,
  ffi.Pointer<ffi.Void> format,
) => MiniAVResultCode.fromValue(
  _MiniAV_Screen_ConfigureRegion(
    context,
    display_id,
    x,
    y,
    width,
    height,
    format,
  ),
);

@ffi.Native<
  ffi.Uint32 Function(
    MiniAVScreenContextHandle,
    MiniAVBufferCallback,
    ffi.Pointer<ffi.Void>,
  )
>(symbol: 'MiniAV_Screen_StartCapture')
external int _MiniAV_Screen_StartCapture(
  MiniAVScreenContextHandle context,
  MiniAVBufferCallback callback,
  ffi.Pointer<ffi.Void> user_data,
);

MiniAVResultCode MiniAV_Screen_StartCapture(
  MiniAVScreenContextHandle context,
  MiniAVBufferCallback callback,
  ffi.Pointer<ffi.Void> user_data,
) => MiniAVResultCode.fromValue(
  _MiniAV_Screen_StartCapture(context, callback, user_data),
);

@ffi.Native<ffi.Uint32 Function(MiniAVScreenContextHandle)>(
  symbol: 'MiniAV_Screen_StopCapture',
)
external int _MiniAV_Screen_StopCapture(MiniAVScreenContextHandle context);

MiniAVResultCode MiniAV_Screen_StopCapture(MiniAVScreenContextHandle context) =>
    MiniAVResultCode.fromValue(_MiniAV_Screen_StopCapture(context));

@ffi.Native<
  ffi.Uint32 Function(
    ffi.Pointer<ffi.Pointer<MiniAVDeviceInfo>>,
    ffi.Pointer<ffi.Uint32>,
  )
>(symbol: 'MiniAV_Audio_EnumerateDevices')
external int _MiniAV_Audio_EnumerateDevices(
  ffi.Pointer<ffi.Pointer<MiniAVDeviceInfo>> devices,
  ffi.Pointer<ffi.Uint32> count,
);

MiniAVResultCode MiniAV_Audio_EnumerateDevices(
  ffi.Pointer<ffi.Pointer<MiniAVDeviceInfo>> devices,
  ffi.Pointer<ffi.Uint32> count,
) => MiniAVResultCode.fromValue(_MiniAV_Audio_EnumerateDevices(devices, count));

@ffi.Native<
  ffi.Uint32 Function(
    ffi.Pointer<ffi.Char>,
    ffi.Pointer<ffi.Pointer<ffi.Void>>,
    ffi.Pointer<ffi.Uint32>,
  )
>(symbol: 'MiniAV_Audio_GetSupportedFormats')
external int _MiniAV_Audio_GetSupportedFormats(
  ffi.Pointer<ffi.Char> device_id,
  ffi.Pointer<ffi.Pointer<ffi.Void>> formats,
  ffi.Pointer<ffi.Uint32> count,
);

MiniAVResultCode MiniAV_Audio_GetSupportedFormats(
  ffi.Pointer<ffi.Char> device_id,
  ffi.Pointer<ffi.Pointer<ffi.Void>> formats,
  ffi.Pointer<ffi.Uint32> count,
) => MiniAVResultCode.fromValue(
  _MiniAV_Audio_GetSupportedFormats(device_id, formats, count),
);

@ffi.Native<ffi.Uint32 Function(ffi.Pointer<MiniAVAudioContextHandle>)>(
  symbol: 'MiniAV_Audio_CreateContext',
)
external int _MiniAV_Audio_CreateContext(
  ffi.Pointer<MiniAVAudioContextHandle> context,
);

MiniAVResultCode MiniAV_Audio_CreateContext(
  ffi.Pointer<MiniAVAudioContextHandle> context,
) => MiniAVResultCode.fromValue(_MiniAV_Audio_CreateContext(context));

@ffi.Native<ffi.Uint32 Function(MiniAVAudioContextHandle)>(
  symbol: 'MiniAV_Audio_DestroyContext',
)
external int _MiniAV_Audio_DestroyContext(MiniAVAudioContextHandle context);

MiniAVResultCode MiniAV_Audio_DestroyContext(
  MiniAVAudioContextHandle context,
) => MiniAVResultCode.fromValue(_MiniAV_Audio_DestroyContext(context));

@ffi.Native<
  ffi.Uint32 Function(
    MiniAVAudioContextHandle,
    ffi.Pointer<ffi.Char>,
    ffi.Pointer<ffi.Void>,
  )
>(symbol: 'MiniAV_Audio_Configure')
external int _MiniAV_Audio_Configure(
  MiniAVAudioContextHandle context,
  ffi.Pointer<ffi.Char> device_id,
  ffi.Pointer<ffi.Void> format,
);

MiniAVResultCode MiniAV_Audio_Configure(
  MiniAVAudioContextHandle context,
  ffi.Pointer<ffi.Char> device_id,
  ffi.Pointer<ffi.Void> format,
) => MiniAVResultCode.fromValue(
  _MiniAV_Audio_Configure(context, device_id, format),
);

@ffi.Native<
  ffi.Uint32 Function(
    MiniAVAudioContextHandle,
    MiniAVBufferCallback,
    ffi.Pointer<ffi.Void>,
  )
>(symbol: 'MiniAV_Audio_StartCapture')
external int _MiniAV_Audio_StartCapture(
  MiniAVAudioContextHandle context,
  MiniAVBufferCallback callback,
  ffi.Pointer<ffi.Void> user_data,
);

MiniAVResultCode MiniAV_Audio_StartCapture(
  MiniAVAudioContextHandle context,
  MiniAVBufferCallback callback,
  ffi.Pointer<ffi.Void> user_data,
) => MiniAVResultCode.fromValue(
  _MiniAV_Audio_StartCapture(context, callback, user_data),
);

@ffi.Native<ffi.Uint32 Function(MiniAVAudioContextHandle)>(
  symbol: 'MiniAV_Audio_StopCapture',
)
external int _MiniAV_Audio_StopCapture(MiniAVAudioContextHandle context);

MiniAVResultCode MiniAV_Audio_StopCapture(MiniAVAudioContextHandle context) =>
    MiniAVResultCode.fromValue(_MiniAV_Audio_StopCapture(context));

enum MiniAVResultCode {
  MINIAV_SUCCESS(0),
  MINIAV_ERROR_UNKNOWN(-1),
  MINIAV_ERROR_INVALID_ARG(-2),
  MINIAV_ERROR_NOT_INITIALIZED(-3),
  MINIAV_ERROR_SYSTEM_CALL_FAILED(-4),
  MINIAV_ERROR_NOT_SUPPORTED(-5),
  MINIAV_ERROR_BUFFER_TOO_SMALL(-6),
  MINIAV_ERROR_INVALID_HANDLE(-7),
  MINIAV_ERROR_DEVICE_NOT_FOUND(-8),
  MINIAV_ERROR_DEVICE_BUSY(-9),
  MINIAV_ERROR_ALREADY_RUNNING(-10),
  MINIAV_ERROR_NOT_RUNNING(-11),
  MINIAV_ERROR_OUT_OF_MEMORY(-12),
  MINIAV_ERROR_TIMEOUT(-13);

  final int value;
  const MiniAVResultCode(this.value);

  static MiniAVResultCode fromValue(int value) => switch (value) {
    0 => MINIAV_SUCCESS,
    -1 => MINIAV_ERROR_UNKNOWN,
    -2 => MINIAV_ERROR_INVALID_ARG,
    -3 => MINIAV_ERROR_NOT_INITIALIZED,
    -4 => MINIAV_ERROR_SYSTEM_CALL_FAILED,
    -5 => MINIAV_ERROR_NOT_SUPPORTED,
    -6 => MINIAV_ERROR_BUFFER_TOO_SMALL,
    -7 => MINIAV_ERROR_INVALID_HANDLE,
    -8 => MINIAV_ERROR_DEVICE_NOT_FOUND,
    -9 => MINIAV_ERROR_DEVICE_BUSY,
    -10 => MINIAV_ERROR_ALREADY_RUNNING,
    -11 => MINIAV_ERROR_NOT_RUNNING,
    -12 => MINIAV_ERROR_OUT_OF_MEMORY,
    -13 => MINIAV_ERROR_TIMEOUT,
    _ => throw ArgumentError('Unknown value for MiniAVResultCode: $value'),
  };
}

final class MiniAVDeviceInfo extends ffi.Struct {
  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> device_id;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> name;
}

final class MiniAVCameraContext extends ffi.Opaque {}

typedef MiniAVCameraContextHandle = ffi.Pointer<MiniAVCameraContext>;

final class MiniAVScreenContext extends ffi.Opaque {}

typedef MiniAVScreenContextHandle = ffi.Pointer<MiniAVScreenContext>;

final class MiniAVAudioContext extends ffi.Opaque {}

typedef MiniAVAudioContextHandle = ffi.Pointer<MiniAVAudioContext>;

enum MiniAVLogLevel {
  MINIAV_LOG_LEVEL_DEBUG(0),
  MINIAV_LOG_LEVEL_INFO(1),
  MINIAV_LOG_LEVEL_WARN(2),
  MINIAV_LOG_LEVEL_ERROR(3);

  final int value;
  const MiniAVLogLevel(this.value);

  static MiniAVLogLevel fromValue(int value) => switch (value) {
    0 => MINIAV_LOG_LEVEL_DEBUG,
    1 => MINIAV_LOG_LEVEL_INFO,
    2 => MINIAV_LOG_LEVEL_WARN,
    3 => MINIAV_LOG_LEVEL_ERROR,
    _ => throw ArgumentError('Unknown value for MiniAVLogLevel: $value'),
  };
}

typedef MiniAVLogCallbackFunction =
    ffi.Void Function(
      ffi.Uint32 level,
      ffi.Pointer<ffi.Char> message,
      ffi.Pointer<ffi.Void> user_data,
    );
typedef DartMiniAVLogCallbackFunction =
    void Function(
      MiniAVLogLevel level,
      ffi.Pointer<ffi.Char> message,
      ffi.Pointer<ffi.Void> user_data,
    );
typedef MiniAVLogCallback =
    ffi.Pointer<ffi.NativeFunction<MiniAVLogCallbackFunction>>;

enum MiniAVBufferType {
  MINIAV_BUFFER_TYPE_UNKNOWN(0),
  MINIAV_BUFFER_TYPE_VIDEO(1),
  MINIAV_BUFFER_TYPE_AUDIO(2);

  final int value;
  const MiniAVBufferType(this.value);

  static MiniAVBufferType fromValue(int value) => switch (value) {
    0 => MINIAV_BUFFER_TYPE_UNKNOWN,
    1 => MINIAV_BUFFER_TYPE_VIDEO,
    2 => MINIAV_BUFFER_TYPE_AUDIO,
    _ => throw ArgumentError('Unknown value for MiniAVBufferType: $value'),
  };
}

enum MiniAVPixelFormat {
  MINIAV_PIXEL_FORMAT_UNKNOWN(0),
  MINIAV_PIXEL_FORMAT_I420(1),
  MINIAV_PIXEL_FORMAT_NV12(2),
  MINIAV_PIXEL_FORMAT_NV21(3),
  MINIAV_PIXEL_FORMAT_YUY2(4),
  MINIAV_PIXEL_FORMAT_UYVY(5),
  MINIAV_PIXEL_FORMAT_RGB24(6),
  MINIAV_PIXEL_FORMAT_BGR24(7),
  MINIAV_PIXEL_FORMAT_RGBA32(8),
  MINIAV_PIXEL_FORMAT_BGRA32(9),
  MINIAV_PIXEL_FORMAT_ARGB32(10),
  MINIAV_PIXEL_FORMAT_ABGR32(11),
  MINIAV_PIXEL_FORMAT_MJPEG(12);

  final int value;
  const MiniAVPixelFormat(this.value);

  static MiniAVPixelFormat fromValue(int value) => switch (value) {
    0 => MINIAV_PIXEL_FORMAT_UNKNOWN,
    1 => MINIAV_PIXEL_FORMAT_I420,
    2 => MINIAV_PIXEL_FORMAT_NV12,
    3 => MINIAV_PIXEL_FORMAT_NV21,
    4 => MINIAV_PIXEL_FORMAT_YUY2,
    5 => MINIAV_PIXEL_FORMAT_UYVY,
    6 => MINIAV_PIXEL_FORMAT_RGB24,
    7 => MINIAV_PIXEL_FORMAT_BGR24,
    8 => MINIAV_PIXEL_FORMAT_RGBA32,
    9 => MINIAV_PIXEL_FORMAT_BGRA32,
    10 => MINIAV_PIXEL_FORMAT_ARGB32,
    11 => MINIAV_PIXEL_FORMAT_ABGR32,
    12 => MINIAV_PIXEL_FORMAT_MJPEG,
    _ => throw ArgumentError('Unknown value for MiniAVPixelFormat: $value'),
  };
}

enum MiniAVAudioFormat {
  MINIAV_AUDIO_FORMAT_UNKNOWN(0),
  MINIAV_AUDIO_FORMAT_U8(1),
  MINIAV_AUDIO_FORMAT_S16(2),
  MINIAV_AUDIO_FORMAT_S24(3),
  MINIAV_AUDIO_FORMAT_S32(4),
  MINIAV_AUDIO_FORMAT_F32(5);

  final int value;
  const MiniAVAudioFormat(this.value);

  static MiniAVAudioFormat fromValue(int value) => switch (value) {
    0 => MINIAV_AUDIO_FORMAT_UNKNOWN,
    1 => MINIAV_AUDIO_FORMAT_U8,
    2 => MINIAV_AUDIO_FORMAT_S16,
    3 => MINIAV_AUDIO_FORMAT_S24,
    4 => MINIAV_AUDIO_FORMAT_S32,
    5 => MINIAV_AUDIO_FORMAT_F32,
    _ => throw ArgumentError('Unknown value for MiniAVAudioFormat: $value'),
  };
}

final class UnnamedStruct1 extends ffi.Struct {
  @ffi.Uint32()
  external int width;

  @ffi.Uint32()
  external int height;

  @ffi.Uint32()
  external int pixel_formatAsInt;

  MiniAVPixelFormat get pixel_format =>
      MiniAVPixelFormat.fromValue(pixel_formatAsInt);

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Uint32> stride_bytes;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer<ffi.Void>> planes;
}

final class UnnamedStruct2 extends ffi.Struct {
  @ffi.Uint32()
  external int frame_count;

  @ffi.Uint32()
  external int channel_count;

  @ffi.Uint32()
  external int formatAsInt;

  MiniAVAudioFormat get format => MiniAVAudioFormat.fromValue(formatAsInt);

  external ffi.Pointer<ffi.Void> data;
}

final class UnnamedUnion1 extends ffi.Union {
  external UnnamedStruct1 video;

  external UnnamedStruct2 audio;
}

final class MiniAVBuffer extends ffi.Struct {
  @ffi.Uint32()
  external int typeAsInt;

  MiniAVBufferType get type => MiniAVBufferType.fromValue(typeAsInt);

  @ffi.Int64()
  external int timestamp_us;

  external UnnamedUnion1 data;

  @ffi.Size()
  external int data_size_bytes;

  external ffi.Pointer<ffi.Void> user_data;

  external ffi.Pointer<ffi.Void> internal_handle;
}

typedef MiniAVBufferCallbackFunction =
    ffi.Void Function(
      ffi.Pointer<MiniAVBuffer> buffer,
      ffi.Pointer<ffi.Void> user_data,
    );
typedef DartMiniAVBufferCallbackFunction =
    void Function(
      ffi.Pointer<MiniAVBuffer> buffer,
      ffi.Pointer<ffi.Void> user_data,
    );
typedef MiniAVBufferCallback =
    ffi.Pointer<ffi.NativeFunction<MiniAVBufferCallbackFunction>>;
